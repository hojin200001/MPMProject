<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<context:component-scan base-package="service" />
	<!-- @Aspect를 통해서 빈을 등록해 주는 역할 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value ="com.mysql.jdbc.Driver"></property>
		<property name="url" value ="jdbc:mysql://localhost/mpm?useSSL=false"></property>
		<property name="username" value = "root"></property>
		<property name="password" value = "1111"></property>
		<property name="maxActive" value="8"></property>
		<property name="maxIdle" value="0"></property>
		<property name="minIdle" value="0"></property>
		<property name="initialSize" value="0"></property>
	</bean>
		
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath*:dao/mapper/**/*.xml"></property>
		<property name="typeAliasesPackage" value="model"></property>
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 요부분부터 트랜적션 처리위한것 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	<!-- 트랜잭션 매니저 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/> 
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> 
			<tx:method name="insert*" rollback-for="Exception"/> 
			<tx:method name="update*" rollback-for="Exception"/> 
			<tx:method name="remove*" rollback-for="Exception"/> 
		</tx:attributes> 
	</tx:advice>
	
	<aop:config proxy-target-class="true"> 
		<aop:pointcut id="serviceOperation" expression="execution(public * *ServiceImpl.*(..))" /> 
		<aop:advisor id="transactionAdvisor" pointcut-ref="serviceOperation" advice-ref="txAdvice"/> 
	</aop:config><!-- 요기까지 트랜젝션 -->
	
	<bean id="freeBoardDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="dao.FreeBoardDao"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	<bean id="nomalDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="dao.NomalDao"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	<bean id="comBoardDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="dao.ComBoardDao"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>


	<bean id="feeReplyDao" class="org.mybatis.spring.mapper.MapperFactoryBean">

		<property name="mapperInterface" value="dao.FreeReplyDao"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
</beans>
